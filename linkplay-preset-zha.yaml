# Blueprint metadata
blueprint:
  name: Linkplay Preset controller for ZHA
  description: |
    Select custom triggers to control pre-configured presets of a Linkplay media player.
    Currently supported controllers: IKEA Symfonisk
  source_url: google.sk
  domain: automation
  input:
    media_player:
      name: Linkplay Media player entity
      description: The entity of the Linkplay media player to be controlled.
      selector:
        entity:
          domain: media_player
    input_select:
      name: Preset helper selector
      description: A dropdown helper with the list of all presets for the media player.
    input_device_symfonisk:
      name: Symfonisk remote controller device
      description: The IKEA symfonisk remote controller
      selector:
        device:
          integration: zha
          manufacturer: IKEA of Sweden
          model: SYMFONISK Sound Controller
mode: single
max_exceeded: silent
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input input_device_symfonisk
- platform: state
  entity_id: !input input_select
action:
- variables:
    command: '{{ trigger.event.data.command }}'
    cluster_id: '{{ trigger.event.data.cluster_id }}'
    endpoint_id: '{{ trigger.event.data.endpoint_id }}'
    args: '{{ trigger.event.data.args }}'
    media_player: !input media_player
    input_select: !input input_select
- choose:
  - conditions:
    - '{{ command == ''toggle'' }}'
    - '{{ cluster_id == 6 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ states.media_player.state == "playing" }}'
    sequence:
    - service: media_player.media_pause
      target: !input 'media_player'
  - conditions:
    - '{{ command == ''toggle'' }}'
    - '{{ cluster_id == 6 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ states.media_player.state != "playing" }}'
    sequence:
    - service: linkplay.preset
      data:
        entity_id: '{{ media_player }}'
        preset: '{{ states.input_select.state }}'
  - conditions:
    - '{{ command == ''step'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ args == [0, 1, 0] }}'
    sequence:
    - service: input_select.select_next
      target:
        entity_id: !input input_select
      data:
        cycle: true 
  - conditions:
    - '{{ command == ''step'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ args == [1, 1, 0] }}'
    sequence:
    - service: input_select.select_previous
      target:
        entity_id: !input input_select
      data:
        cycle: true 
  - conditions:
    - '{{ command == ''move'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ args == [0, 195] }}'
    sequence:
    - service: media_player.volume_up
      target: !input 'media_player'
    - delay: 1
  - conditions:
    - '{{ command == ''move'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ args == [1, 195] }}'
    sequence:
    - service: media_player.volume_down
      target: !input 'media_player'
    - delay: 1
  - conditions:
    - '{{ trigger.event == None }}'
    - '{{ trigger.to_state.state != None }}'
    sequence:
    - service: linkplay.preset
      data:
        entity_id: '{{ media_player }}'
        preset: '{{ states.input_select.state }}'
